// ------------------------------------------------------------------------
//  Copyright 2025 The Dapr Authors
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ------------------------------------------------------------------------

using System.Buffers;
using System.Runtime.CompilerServices;
using Dapr.Common;
using Dapr.Common.Extensions;
using P = Dapr.Client.Autogen.Grpc.v1.Dapr;
using Autogenerated = Dapr.Client.Autogen.Grpc.v1;

namespace Dapr.Cryptography.Encryption;

/// <summary>
/// A client for interacting with the Dapr cryptography encryption and decryption endpoints.
/// </summary>
internal sealed class DaprEncryptionGrpcClient(P.DaprClient client, HttpClient httpClient, string? daprApiToken) : DaprEncryptionClient
{
    /// <summary>
    /// The HTTP client used by the client for calling the Dapr runtime.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal readonly HttpClient HttpClient = httpClient;
    /// <summary>
    /// The Dapr API token value.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal readonly string? DaprApiToken = daprApiToken;
    
    /// <inheritdoc />
    [Obsolete(
        "The API is currently not stable as it is in the Alpha stage. This attribute will be removed once it is stable.")]
    public override async Task<ReadOnlyMemory<byte>> EncryptAsync(
        string vaultResourceName,
        ReadOnlyMemory<byte> plaintextBytes,
        string keyName,
        EncryptionOptions encryptionOptions,
        CancellationToken cancellationToken = default)
    {
        using var memoryStream = new MemoryStream(plaintextBytes.Length);
        await memoryStream.WriteAsync(plaintextBytes, cancellationToken);
        memoryStream.Position = 0;

        var encryptionResult = EncryptAsync(vaultResourceName, memoryStream, keyName, encryptionOptions, cancellationToken);

        var bufferedResult = new ArrayBufferWriter<byte>();
        await foreach (var item in encryptionResult)
        {
            bufferedResult.Write(item.Span);
        }

        return bufferedResult.WrittenMemory;
    }

    /// <inheritdoc />
    [Obsolete(
        "The API is currently not stable as it is in the Alpha stage. This attribute will be removed once it is stable.")]
    public override async IAsyncEnumerable<ReadOnlyMemory<byte>> EncryptAsync(
        string vaultResourceName,
        Stream plaintextStream,
        string keyName,
        EncryptionOptions encryptionOptions,
        [EnumeratorCancellation] CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrEmpty(vaultResourceName, nameof(vaultResourceName));
        ArgumentException.ThrowIfNullOrEmpty(keyName, nameof(keyName));
        ArgumentNullException.ThrowIfNull(plaintextStream, nameof(plaintextStream));
        ArgumentNullException.ThrowIfNull(encryptionOptions, nameof(encryptionOptions));
        
        var duplexStream = client.EncryptAlpha1(DaprClientUtilities.ConfigureGrpcCallOptions(
            typeof(DaprEncryptionClient).Assembly,
            this.DaprApiToken, cancellationToken));
        var processor = new DaprEncryptionProcessor();

        await foreach (var encryptedData in processor.ProcessStreamAsync(
                           plaintextStream,
                           encryptionOptions.StreamingBlockSizeInBytes,
                           duplexStream,
                           new Autogenerated.EncryptRequest
                           {
                               Options = new Autogenerated.EncryptRequestOptions
                               {
                                   ComponentName = vaultResourceName,
                                   DataEncryptionCipher = encryptionOptions.EncryptionCipher.GetValueFromEnumMember(),
                                   KeyName = keyName,
                                   DecryptionKeyName = encryptionOptions.DecryptionKeyName,
                                   KeyWrapAlgorithm = encryptionOptions.KeyWrapAlgorithm.GetValueFromEnumMember(),
                                   OmitDecryptionKeyName =
                                       string.IsNullOrWhiteSpace(encryptionOptions.DecryptionKeyName)
                               }
                           },
                           cancellationToken))
        {
            yield return encryptedData;
        }
    }

    /// <inheritdoc />
    [Obsolete(
        "The API is currently not stable as it is in the Alpha stage. This attribute will be removed once it is stable.")]
    public override async Task<ReadOnlyMemory<byte>> DecryptAsync(
        string vaultResourceName,
        ReadOnlyMemory<byte> ciphertextBytes,
        string keyName,
        DecryptionOptions? options = null,
        CancellationToken cancellationToken = default)
    {
        using var memoryStream = new MemoryStream(ciphertextBytes.Length);
        await memoryStream.WriteAsync(ciphertextBytes, cancellationToken);
        memoryStream.Position = 0;

        var decryptionResult = DecryptAsync(vaultResourceName, memoryStream, keyName, options, cancellationToken);

        var bufferedResult = new ArrayBufferWriter<byte>();
        await foreach(var item in decryptionResult)
        {
            bufferedResult.Write(item.Span);
        }

        return bufferedResult.WrittenMemory;
    }

    /// <inheritdoc />
    [Obsolete(
        "The API is currently not stable as it is in the Alpha stage. This attribute will be removed once it is stable.")]
    public override async IAsyncEnumerable<ReadOnlyMemory<byte>> DecryptAsync(
        string vaultResourceName,
        Stream ciphertextStream,
        string keyName,
        DecryptionOptions? options = null,
        [EnumeratorCancellation] CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrEmpty(vaultResourceName, nameof(vaultResourceName));
        ArgumentNullException.ThrowIfNull(ciphertextStream, nameof(ciphertextStream));
        ArgumentException.ThrowIfNullOrEmpty(keyName, nameof(keyName));

        options ??= new DecryptionOptions();

        var duplexStream = client.DecryptAlpha1(DaprClientUtilities.ConfigureGrpcCallOptions(
            typeof(DaprEncryptionClient).Assembly,
            this.DaprApiToken, cancellationToken));
        var processor = new DaprDecryptionProcessor();

        await foreach (var decryptedData in processor.ProcessStreamAsync(
                           ciphertextStream,
                           options.StreamingBlockSizeInBytes,
                           duplexStream,
                           new Autogenerated.DecryptRequest
                           {
                               Options = new Autogenerated.DecryptRequestOptions
                               {
                                   ComponentName = vaultResourceName, KeyName = keyName
                               }
                           }, cancellationToken))
        {
            yield return decryptedData;
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            this.HttpClient.Dispose();
        }
    }
}
