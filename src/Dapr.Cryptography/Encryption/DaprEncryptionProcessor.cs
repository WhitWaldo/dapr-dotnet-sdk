// ------------------------------------------------------------------------
//  Copyright 2025 The Dapr Authors
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ------------------------------------------------------------------------

using System.Buffers;
using System.Runtime.CompilerServices;
using Google.Protobuf;
using Grpc.Core;
using Autogenerated = Dapr.Client.Autogen.Grpc.v1;

namespace Dapr.Cryptography.Encryption;

/// <summary>
/// Processor for handling Dapr encryption pipeline-based operations.
/// </summary>
internal sealed class DaprEncryptionProcessor : DaprEncryptionPipelineProcessorBase<Autogenerated.EncryptRequest, Autogenerated.EncryptRequestOptions, Autogenerated.EncryptResponse>
{
    /// <summary>
    /// Sends the stream from the SDK to the Dapr sidecar.
    /// </summary>
    /// <param name="stream">The stream containing the data to be processed.</param>
    /// <param name="blockSize">The size of the blocks to be read from the stream.</param>
    /// <param name="duplexStream">The duplex stream used for sending and receiving data.</param>
    /// <param name="options">The options for the request.</param>
    /// <param name="cancellationToken">A token to monitor for cancellation requests.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected override async Task SendStreamAsync(
        Stream stream,
        int blockSize,
        AsyncDuplexStreamingCall<Autogenerated.EncryptRequest, Autogenerated.EncryptResponse> duplexStream,
        Autogenerated.EncryptRequestOptions options,
        CancellationToken cancellationToken)
    {
        await duplexStream.RequestStream.WriteAsync(new Autogenerated.EncryptRequest { Options = options },
            cancellationToken);

        await using (var bufferedStream = new BufferedStream(stream, blockSize))
        {
            var buffer = ArrayPool<byte>.Shared.Rent(blockSize);
            try
            {
                int bytesRead;
                ulong sequenceNumber = 0;

                while ((bytesRead = await bufferedStream.ReadAsync(buffer.AsMemory(0, blockSize), cancellationToken)) !=
                       0)
                {
                    await duplexStream.RequestStream.WriteAsync(
                        new Autogenerated.EncryptRequest
                        {
                            Payload = new Autogenerated.StreamPayload
                            {
                                Data = ByteString.CopyFrom(buffer, 0, bytesRead), Seq = sequenceNumber
                            }
                        }, cancellationToken);

                    //Increment the sequence number
                    sequenceNumber++;
                }
            }
            finally
            {
                ArrayPool<byte>.Shared.Return(buffer);
            }
        }

        await duplexStream.RequestStream.CompleteAsync();
    }

    /// <summary>
    /// Retrieves the processed stream data from the Dapr sidecar.
    /// </summary>
    /// <param name="duplexStream">The duplex stream used for receiving data.</param>
    /// <param name="cancellationToken">A token to monitor for cancellation requests.</param>
    /// <returns>An asynchronous enumerable of the processed data.</returns>
    protected override async IAsyncEnumerable<ReadOnlyMemory<byte>> RetrieveStreamAsync(
        AsyncDuplexStreamingCall<Autogenerated.EncryptRequest, Autogenerated.EncryptResponse> duplexStream,
        [EnumeratorCancellation] CancellationToken cancellationToken)
    {
        await foreach (var encryptResponse in duplexStream.ResponseStream.ReadAllAsync(cancellationToken)
                           .ConfigureAwait(false))
        {
            yield return encryptResponse.Payload.Data.Memory;
        }
    }
}
