// ------------------------------------------------------------------------
// Copyright 2024 The Dapr Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

using System.Text.Json;
using Dapr.Common;
using P = Dapr.Client.Autogen.Grpc.v1;

namespace Dapr.Messaging.PublishSubscribe;

/// <summary>
/// The base implementation of a Dapr pub/sub client.
/// </summary>
public abstract class DaprPublishSubscribeClient(P.Dapr.DaprClient client, HttpClient httpClient, JsonSerializerOptions jsonSerializerOptions, string? daprApiToken = null) : IDaprClient
{
    private bool disposed;

    /// <summary>
    /// The HTTP client used by the client for calling the Dapr runtime.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal protected readonly HttpClient HttpClient = httpClient;

    /// <summary>
    /// The Dapr API token value.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal protected readonly string? DaprApiToken = daprApiToken;

    /// <summary>
    /// The autogenerated Dapr client.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal protected readonly P.Dapr.DaprClient Client = client;

    /// <summary>
    /// The JSON serializer options.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal protected JsonSerializerOptions JsonSerializerOptions = jsonSerializerOptions;
    
    /// <summary>
    /// Dynamically subscribes to a Publish/Subscribe component and topic.
    /// </summary>
    /// <param name="pubSubName">The name of the Publish/Subscribe component.</param>
    /// <param name="topicName">The name of the topic to subscribe to.</param>
    /// <param name="options">Configuration options.</param>
    /// <param name="messageHandler">The delegate reflecting the action to take upon messages received by the subscription.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns></returns>
    public abstract Task<IAsyncDisposable> SubscribeAsync(string pubSubName, string topicName, DaprSubscriptionOptions options, TopicMessageHandler messageHandler, CancellationToken cancellationToken = default);

    /// <summary>
    /// Publishes an event to the specified topic.
    /// </summary>
    /// <param name="pubSubName">The name of the Publish/Subscribe component.</param>
    /// <param name="topicName">The name of the topic to publish to.</param>
    /// <param name="data">The optional data that will be JSON serialized and provided as the event payload.</param>
    /// <param name="metadata">A collection of optional metadata key/value pairs that will be provided to the component. The valid
    /// metadata keys and values are determined by the type of PubSub component used.</param>
    /// <param name="cancellationToken">Cancellation token used to cancel the operation.</param>
    /// <typeparam name="TData">The type of data that will be JSON serialized and provided  as the event payload.</typeparam>
    public abstract Task PublishEventAsync<TData>(
        string pubSubName,
        string topicName,
        TData? data = null,
        Dictionary<string, string>? metadata = null,
        CancellationToken cancellationToken = default) where TData : class;

    /// <summary>
    /// Bulk-publishes multiple events to the specified topic at once.
    /// </summary>
    /// <param name="pubSubName">The name of the Publish/Subscribe component.</param>
    /// <param name="topicName">The name of the topic to publish to.</param>
    /// <param name="data">The collection of data that will be JSON serialized and provided as the event payload.</param>
    /// <param name="metadata">A collection of optional metadata key/value pairs that will be provided to the component. The valid
    /// metadata keys and values are determined by the type of PubSub component used.</param>
    /// <param name="cancellationToken">Cancellation token used to cancel the operation.</param>
    /// <typeparam name="TData">The type of data that will be JSON serialized and provided  as the event payload.</typeparam>
    public abstract Task PublishEventAsync<TData>(
        string pubSubName,
        string topicName,
        IReadOnlyList<TData> data,
        Dictionary<string, string>? metadata = null,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Publishes an event with a byte-based payload to the specified topic.
    /// </summary>
    /// <param name="pubSubName">The name of the Publish/Subscribe component.</param>
    /// <param name="topicName">The name of the topic to publish to.</param>
    /// <param name="data">The raw byte data used as the event payload.</param>
    /// <param name="dataContentType">The content type of the given bytes. This defaults to "application/json".</param>
    /// <param name="metadata">A collection of optional metadata key/value pairs that will be provided to the component. The valid
    /// metadata keys and values are determined by the type of PubSub component used.</param>
    /// <param name="cancellationToken">Cancellation token used to cancel the operation.</param>
    public abstract Task PublishEventAsync(
        string pubSubName,
        string topicName,
        ReadOnlyMemory<byte> data,
        string dataContentType = "application/json",
        Dictionary<string, string>? metadata = null,
        CancellationToken cancellationToken = default);
    
    
    /// <inheritdoc />
    public void Dispose()
    {
        if (!this.disposed)
        {
            Dispose(disposing: true);
            this.disposed = true;
        }
    }

    /// <summary>
    /// Disposes the resources associated with the object.
    /// </summary>
    /// <param name="disposing"><c>true</c> if called by a call to the <c>Dispose</c> method; otherwise false.</param>
    protected virtual void Dispose(bool disposing)
    {
    }
}
